/**
 * prgrmr
 *
 * Programmer profile for GitHub projects
 *
 * @author Jason Mulligan <jason.mulligan@avoidwork.com>
 * @copyright 2013 Jason Mulligan
 * @license BSD-3 <https://raw.github.com/avoidwork/prgrmr/master/LICENSE>
 * @link https://github.com/avoidwork/prgrmr
 * @version 0.1.0
 */
(function(e){"use strict";var t,n={blog:{},events:{},orgs:{},repos:{},version:"0.1.0"},r={events:"https://api.github.com/users/{{user}}/events",orgs:"https://api.github.com/users/{{user}}/orgs",repos:"https://api.github.com/users/{{user}}/repos"},i=function(n){var r=n.message||n;t.log(r,"error"),e.humane.error(r)},s=function(){void 0},o=function(){t("#year").html((new Date).getFullYear()),e.humane.error=e.humane.spawn({addnCls:"humane-jackedup-error",timeout:3e3}),"assets/config.json".get(function(e){n.config=e},function(e){throw i(e),e}).then(function(r){if(r.github.isEmpty())throw Error(t.label.error.invalidArguments);t.iterate(n,function(e,n){this[n]=t.data({id:n},null,{key:"id"})}),e.prgrmr=n},function(e){throw i("Configuration is not valid: "+(e.message||e)),e}).then(function(e){n.events.data.setUri("").then(function(e){s(e)},function(e){i(e)}),n.orgs.data.setUri("").then(function(e){a(e)},function(e){i(e)}),n.repos.data.setUri("").then(function(e){f(e)},function(e){i(e)}),e.tumblr.isEmpty()||n.blog.data.setUri(e.tumblr).then(function(e){tumblr(e)},function(e){i(e)})},function(e){i("Could not consume APIs: "+(e.message||e))})},u=function(e,n){n=n===!0,t.log(e),n||humane.log(e)},a=function(){void 0},f=function(){void 0},l=function(e,n){var r=t.promise();return utility.defer(function(){var e={};r.resolve(e)}),r};t=e[abaaso.aliased],t.on("render",function(){o()})})(this);